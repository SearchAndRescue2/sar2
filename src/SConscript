import os.path
from sys import platform

AddOption( "--ldflags",
           dest="ldflags",
           type="string",
           nargs=1,
           action="store",
           help="set custom ldflags")

AddOption( "--optflags",
           dest="optflags",
           type="string",
           nargs=1,
           action="store",
           help="set custom CPPFLAGS")

AddOption( "--prefix",
           dest="prefix",
           type="string",
           nargs=1,
           action="store",
           help="custom install prefix (/usr/local)")

ldflags = GetOption("ldflags")
optflags = GetOption("optflags")
destdir = os.environ.get("DESTDIR")
prefix = GetOption('prefix')
if prefix is None:
    prefix='/usr/local'

env = Environment(PREFIX = prefix, DESTDIR = destdir)
debug = ARGUMENTS.get('debug', 0)


# Build flags in normal or debug mode
if bool(debug):
    env.Append(CPPFLAGS = ['-g', '-Wall', '-O0', '-finline-functions'])
else:
    env.Append(CPPFLAGS = ['-O6', '-funroll-loops',
                           '-fomit-frame-pointer',
                           '-ffast-math', '-finline-functions',
                           '-fexpensive-optimizations'])

# OSX needs some special treatment
if platform == "darwin":
    env.Append(CPPFLAGS = ['-I/opt/X11/include',
                            '-I/usr/local/opt/openal-soft/include'])
    env.Append(LINKFLAGS = ['-L/opt/X11/lib', '-lGL', '-lX11',
                            '-L/usr/local/opt/openal-soft/lib'])

# Default defines and optional flags
if optflags:
    env.Append(CPPFLAGS = list(optflags.split(" ")))
else:
    env.Append(CPPFLAGS = ['-DHAVE_LIBXPM', '-DHAVE_XF86_VIDMODE'])

if ldflags:
    env.Append(LINKFLAGS = ldflags)


# List of libraries that will be linked with any executable
# programs created by this environment.
env.Append(LIBS = ['m', 'SDL2', 'SM', 'ICE',
                   'X11','Xext','Xmu', 'Xpm',
                   'Xxf86vm',
                   'GL', 'GLU', 'pthread', 'alut',
                   'vorbisfile', 'openal'])


sources = Split("""
v3dfio.c
gctl.c
sarfio.c
sfm.c
explosion.c
cpinsbearing.c
sfmmath.c
cmdclean.c
simcb.c
sarinstall.c
simcontact.c
sarsplash.c
cpinshorizon.c
sarkey.c
stategl.c
v3dmodel.c
sarmenumanage.c
sardrawpm.c
menuobjview.c
humanio.c
gwx.c
sfmsimforce.c
simsurface.c
v3dhf.c
cpinsaltimeter.c
horizon.c
scenesound.c
sarsimbegin.c
playerstatio.c
sarmusic.c
sarmenuop.c
weather.c
cmdmemory.c
messages.c
main.c
simop.c
gwx_dialog.c
sarsimend.c
sartime.c
missionio.c
sardrawpm_building.c
sardrawpm_hangar.c
human.c
simutils.c
texturelistio.c
x3d.c
sardrawpm_ptt.c
sardrawmessages.c
v3dgl.c
cmdsmoke.c
objsound.c
sarmenuoptions.c
sarcamp.c
v3dmh.c
cmdtime.c
mission.c
menumap.c
v3dmp.c
textinput.c
sound.c
sardrawpm_controltower.c
sardrawrunway.c
objutils.c
weatherio.c
simmanage.c
menu.c
matrixmath.c
cmdoption.c
optionio.c
sardrawpm_tower.c
cpins.c
sarmenubuild.c
sarmemory.c
sarfioopen.c
sardrawutils.c
objio.c
fire.c
cmd.c
sarmenucb.c
sardraw.c
cp.c
sardrawhuman.c
sarutils.c
text3d.c
sceneio.c
sarscreenshot.c
image.c
sardrawselect.c
sfmmodel.c
cmdset.c
smoke.c
sardrawpm_radiotower.c
musiclistio.c
v3dtex.c
cmdfire.c
sarfiosave.c
sardrawhelipad.c
objiopremodeled.c
cpfio.c
tga.cpp
string.cpp
strexp.cpp
gww.cpp
disk.cpp
tgadither.cpp
fio.cpp
""")

object_list = env.Object(source = sources)
sar2 = env.Program(target='#bin/sar2', source=[object_list])
data='#data'
man='#man/sar2.6.bz2'
pixmap='#extra/sar2.xpm'
env.Alias("install", env.InstallAs('$DESTDIR/$PREFIX/share/sar2', data))
env.Alias("install", env.Install('$DESTDIR/$PREFIX/share/man/man6', man))
env.Alias("install", env.Install('$DESTDIR/$PREFIX/share/pixmaps', pixmap))
env.Alias("install", env.Install('$DESTDIR/$PREFIX/bin', sar2))
